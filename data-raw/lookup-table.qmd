---
title: "Create Lookup Table"
author: "Emmanuel Teitelbaum"
format: html
---

Let's download [Structure of V-Dem Indices, Components and Indicators](https://v-dem.net/documents/41/v-dem_structureofaggregation_v14.pdf) file from V-Dem. We will use this to create the lookup table for the V-Dem data.

```{r}
if (!file.exists("v-dem_structureofaggregation_v14.pdf")) {
  download.file(
    "https://v-dem.net/documents/41/v-dem_structureofaggregation_v14.pdf",
    "v-dem_structureofaggregation_v14.pdf"
  )
}
```

Next we will scrape the file for names and descriptions of variables. When we extrac the text, the underscores are missing in the variable names. We will add them back in with `stringr` and regular expressions.

```{r}
# Load necessary libraries
library(pdftools)
library(stringr)

# Read the PDF file and extract text
pdf_text <- pdf_text("v-dem_structureofaggregation_v14.pdf")

# List of prefixes after which underscores are missing
prefixes <- c("v2x", "v2ex", "v2xca", "v2xcl", "v2xcs", "v2xdd", "v2xdd_i",
              "v2xdl", "v2xel", "v2xeg", "v2xex","v2xlg", "v2xnp", "v2xme",
              "v2xpa", "v2xpe", "v2xps", "v2xpas", "v2eltype",
              "v2x_EDcomp", "v2x_ex", "v2x_frassoc", "v2x_freeexp", 
              "v2clacjstm", "v2clacjstw", "v2cltrnslw", "v2elfrfair",
              "v2elfrfair_osp", "v2elmulpar", "v2elmulpar_osp", "v2eltype",
              "v2exremhsp", "v2exrmhsol", "v2exrmhsol_2", "v2exrmhsol_3",
              "v2exrmhsol_4", "v2psnatpar")

# Loop through each prefix and add an underscore after it
for (prefix in prefixes) {
  pattern <- paste0("\\b", prefix, "\\s(\\w+)")
  replacement <- paste0(prefix, "_\\1")
  pdf_text <- str_replace_all(pdf_text, pattern, replacement)
}

#pdf_text
```

Now we will organize the text into lines, code each line for its level in the V-Dem coding hierarchy (high-, mid- and lower-level indices and indicators) and create the initial data frame.

```{r}
library(tibble)

# reorganize text into lines and squish
pdf_text_lines <- str_split(pdf_text, "\n") |>
  unlist() 

# clean lines 
clean_lines <- str_squish(pdf_text_lines)
  
# Function to determine the level based on indentation
determine_level <- function(line) {
  if (str_detect(line, "^\\s{0,15}\\S")) {
    return("High-level index")
  } else if (str_detect(line, "^\\s{16,33}\\S")) {
    return("Mid-level index")
  } else if (str_detect(line, "^\\s{34,53}\\S")) {
    return("Lower-level index")
  } else {
    return("Indicator")
  }
}

# Apply the function to each line to determine the level
levels <- sapply(pdf_text_lines, determine_level)

# Create a data frame with the lines and their levels
lines <- data.frame(line = clean_lines, level = levels, stringsAsFactors = FALSE)
```

Now we can separate out and create columns for the names and tags, delete the original column that had both and drop the missing rows. 

```{r}
library(tidyr)
library(dplyr)

lookup_tbl <- lines |>
  mutate(name = str_extract(line, ".*(?= v2)"),
         name = str_trim(name),
         tag = str_extract(line, "v2\\S+")) |>
  select(-line) |>
  relocate(tag, name, level) |>
  drop_na() 
```

Now let's add a column to the data frame that numbers the categories.

```{r}
# Initialize the category column and counter
lookup_tbl <- lookup_tbl |>
  mutate(category = NA_character_)

counter <- 0

# Iterate through the rows to assign categories based on the high-level indicator
lookup_tbl <- lookup_tbl |>
  rowwise() |>
  mutate(category = {
    if (str_detect(tag, "^v2x")) {
      counter <<- counter + 1
    }
    paste0("category_", counter)
  })
```

And let's also add a column with the category names. We will use the lower-level indicator names for the category names. Later we can use these to filter indicators affiliated with a specific category.

```{r}
# Initialize the category column and current high-level tag
lookup_tbl <- lookup_tbl |>
  mutate(category_name = NA_character_)
current_tag <- NA_character_

# Iterate through the rows to assign categories based on the high-level indicator
lookup_tbl <- lookup_tbl |>
  rowwise() |>
  mutate(category_name = {
    if (str_detect(tag, "^v2x")) {
      current_tag <<- tag
    }
    current_tag
  }) %>%
  ungroup()
```

Let's clean up the lookup table. We wil drop the party system variables, which will not be part of this package. We will also fix a couple of errors and change some variable names/descriptions. 

```{r}
lookup_tbl <- lookup_tbl |>
  # drop the party system variables
  filter(!str_detect(category_name, "v2xpa")) |>
  # change the tag to the correct one for removal by military
  mutate(tag = if_else(
    name == "HOS removal by the military in practice", 
    "v2exrmhsho_4", 
    tag)) |>
  # correct the tag for mislabeled "Freedom of domestic movement"
  mutate(tag = if_else(
    name == "Freedom from forced labor",
    "v2xcl_dmove",
    tag)) |>
  # correct the name for mislabeled "Freedom of domestic movement"
  mutate(name = if_else(
    tag == "v2xcl_dmove",
    "Freedom of domestic movement",
    name)) |>
  # correct the name for mislabeled "Freedom from forced labor"
  mutate(name = if_else(
    tag == "v2xcl_slave",
    "Freedom from forced labor",
    name)) |>
  # finally, change the category name for "Freedom of domestic movement"
  mutate(category_name = if_else(
    category == "category_102",
    "v2xcl_dmove",
    category_name))
```

Call `use_data()` and save as internal data.

```{r}
usethis::use_data(lookup_tbl, internal = TRUE, overwrite = TRUE)
```


